---

# Validation 1:  To check whether file exists or not.

- name: To check whether csv file exists or not
  stat:
    path: /{{ host_csv_file_path }}/{{ csv_filename }}
  register: stat_result

- name: Sending an email when specified csv file not exists
  include_role:
      name: common/send_email
  vars:
      mail_subject: CSV file of hosts not exists.
      mail_body: '<p> CSV file on Anisble Tower VM location /{{ host_csv_file_path }}/{{ csv_filename }} does not exists.'
  when: not stat_result.stat.exists

- name: Exiting the playbook due to csv file not found
  fail:
    msg: "CSV file on Anisble Tower VM location  /{{ host_csv_file_path }}/{{ csv_filename }} does not exists"
  when: not stat_result.stat.exists

# Read CSV file
- name: Read IPs from CSV file and return a list
  read_csv:
    path: /{{ host_csv_file_path }}/{{ csv_filename }}
  register: ip_address_list


# validation 2: To check whether csv file empty or not
- name: Sending an email when csv file is empty
  include_role:
    name: common/send_email
  vars:
    mail_subject: Provided CSV file is empty.
    mail_body: '<p>There are no hosts found in provided csv file at location  /{{ host_csv_file_path }}/{{ csv_filename }} on Ansible Tower VM'
  when: ip_address_list.list | length == 0

- name: Aborting execution due to empty CSV file
  fail:
    msg: "Exiting the playbook because provided csv file is empty."
  when: ip_address_list.list | length == 0


# Validation 3:  To check whether csv file is in proper format or not ( coloumn name "ip" should be there)
- name: Sending an email when there is no coloumn name 'ip' in csv file
  include_role:
      name: common/send_email
  vars:
      mail_subject: No column name ip in csv file.
      mail_body: '<p>There is no column name <b>ip</b> found in provided csv file /{{ host_csv_file_path }}/{{ csv_filename }}'
  when: " 'ip' not in ip_address_list.list[0].keys()"


- name: Exiting the playbook when there is no coloumn name 'ip' in csv file
  fail:
    msg: "Abort execution because there is no coloumn name 'ip' in csv file"
  when: " 'ip' not in ip_address_list.list[0].keys()"

#Create an IP address list
- name: Create an IP address list using CSV file
  set_fact:
    ip_list: "{{ ip_list + [item.ip]  }}"
  loop: "{{ ip_address_list.list }}"   

- debug: 
    msg: "IPs passed from survey ---- {{ ip_list }}" 

#Filter all the Valid IPv4 address
- name: Filter out the valid IPs
  set_fact:
        valid_ip_list: "{{ valid_ip_list + [item] }}"
  when: item | ipv4 != false
  loop: "{{ ip_list }}"


- name: Print all The Invalid IPs
  debug:
      msg: "Invalid IPs -- {{ ip_list | difference(valid_ip_list) }}"

- name: Send Email if no valid IPv4 adrress available 
  include_role:
    name: common/send_email
  vars:
    mail_subject: No Valid IPv4 address available
    mail_body: '<p>There are No Valid IPv4 address to create patch configuration, hence aborting the template. For detailed information, check log attached in seperate email</p>' 
  when: valid_ip_list | length == 0

- name: Fail If No valid IPv4 address available
  fail:
      msg: "There are No Valid IPv4 address to create patch configuration, hence aborting the template. For detailed information, check log attached in seperate email"
  when: valid_ip_list | length == 0