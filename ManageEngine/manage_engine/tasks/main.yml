---
# tasks file for manage_engine
- name: Include vault file
  include_vars: ../vars/vault.yml
  no_log: True

- name: get the authentication token
  uri:
    url: "https://{{ manageengine_server }}/api/1.3/desktop/authentication?username={{ user }}&password={{ pass|b64encode }}&auth_type=local_authentication"
    method: GET
    validate_certs: no
  register: token

- name: Print the token
  debug:
    msg: "{{ token.json.message_response.authentication.auth_data.auth_token }}"

# - name: fetch all domains
#   uri:
#     url: "http://{{ manageengine_server }}/api/1.3/desktop/serverproperties"
#     headers:
#        Authorization: "{{ token.json.message_response.authentication.auth_data.auth_token }}"
#     method: GET
#   register: domains

# - name: Print the response
#   debug:
#     msg: "{{ domains.json.message_response.serverproperties.domains }}"

- name: fetch all systems
  uri:
    url: "https://{{ manageengine_server }}/api/1.3/patch/allsystems"
    headers:
       Authorization: "{{ token.json.message_response.authentication.auth_data.auth_token }}"
    method: GET
    validate_certs: no
  register: systems

- name: Set the reource list 
  set_fact:
    resources: '{{ resources + [item.resource_id] }}'
  when: item.ip_address in ip_list
  loop: "{{ systems.json.message_response.allsystems }}"

- name: Print the resource list 
  debug:
    msg: "{{ resources }}"

- name: Stop if systems are not listed in ManageEngine Sever 
  fail: 
    msg: "Few or all of the systems are not present in MangageEngine server, Check if agents are insatlled on them"
  when: resources | length != ip_list | length

- name: fetch all patches of type third party updates 
  uri:
    url: "https://{{ manageengine_server }}/api/1.3/patch/allpatches?patchstatusfilter={{ status_type }}"
    headers:
       Authorization: "{{ token.json.message_response.authentication.auth_data.auth_token }}"
    method: GET
    validate_certs: no
  register: patches

- name: filter all the patch list of specific type
  set_fact:
    patch_list: '{{ patch_list + [item.patch_id] }}'
  when: item.update_name == "Security Updates"
  loop: "{{ patches.json.message_response.allpatches }}"

- name: Print the patch list 
  debug:
    msg: "{{ patch_list }}"

- name: Fail if there are no patches available 
  fail: 
    msg: "No Patches of Security and rollups are there to patch"
  when: patch_list | length == 0

- name: fetch all deployment policies 
  uri:
    url: "https://{{ manageengine_server }}/api/1.3/patch/deploymentpolicies"
    headers:
       Authorization: "{{ token.json.message_response.authentication.auth_data.auth_token }}"
    method: GET
    validate_certs: no
  register: dp

- name: Filter Out deploymnet policies name and add it to list
  set_fact:
     deployment_policy_id: "{{ item.template_id }}"
  when: item.template_name == deployment_policy
  loop: "{{dp.json.message_response.deploymentpolicies}}"

- name: set the target data 
  uri:
    url: "https://{{ manageengine_server }}/dcapi/patch/manualdeployment/patchConfig?autoPopulate=true&isOnlyApproved=false"
    headers:
       Authorization: "{{ token.json.message_response.authentication.auth_data.auth_token }}"
       Content-Type: application/patchConfig.v1+json
       Accept: application/patchConfig.v1+json
    body_format: json
    validate_certs: no
    body: {
    "operation":  "INSTALL",
    "patchIDs":  [],
    "criteriaJSON":  {},
    "dcViewFilterID":  "",
    "resourceIDs":  "{{ resources }}"
    }
    method: POST
  register: target

- name: print target
  debug:
     msg: "{{ target.json.patchIDs }}"

- name: filter patches related to the resources
  set_fact:
    filtered_patches: '{{ filtered_patches + [item] }}'
  when:  item | string in target.json.patchIDs
  loop: "{{ patch_list }}"

- name: Print apllicable patches
  debug:
     msg: "{{ filtered_patches }}"

- name: Fail if there are no patches available 
  fail: 
    msg: "No Patches of Security and rollups are there to patch"
  when: filtered_patches | length == 0

#- name: Create the configuration 
#  uri:
#    url: "http://{{ manageengine_server }}/dcapi/patch/manualdeployment"
#    headers:
#      Authorization: "{{ token.json.message_response.authentication.auth_data.auth_token }}"
#      Content-Type: application/patchDeploy.v1+json
#    body_format: json
#    validate_certs: no
#    body: {
#    "collectionType":  1,
#    "targetData":  "{{ target.json.targetData }}",
#    "refreshMinRetry":  1,
#    "configType":  "computer",
#    "configDetails":  [
#                          {
#                              "details":  [
#                                              {
#                                                  "patchIDs": "{{ filtered_patches }}"
#                                              }
#                                          ],
#                              "configName":  "PATCH_INSTALL"
#                          }
#                      ],
#    "applyAtStartupLogon":  false,
#    "continueDeployment":  false,
#    "description":  "{{ description }}",
#    "logonStartupMinRetry":  1,
#    "platform":  "windows",
#    "label":  "{{ label }}",
#    "deploymentPolicyId":  "{{deployment_policy_id}}",
#    "enableRetry":  true,
#    "applyAtRefresh":  false,
#    "noOfRetries":  2,
#    "applyAlways":  false
#    }
#    method: POST
#  register: config_details

#- name: Print the new configuration details 
#  debug:
#    msg: "{{ config_details }}"
