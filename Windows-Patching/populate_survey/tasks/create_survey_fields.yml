---
- name: Get the authentication token from ManageEngine
  uri:
    url: "https://{{ manageengine_server }}/api/1.3/desktop/authentication?username={{ user }}&password={{ pass|b64encode }}&auth_type=local_authentication"
    method: GET
    validate_certs: no
  register: token

- name: Print the authentication token
  debug:
    msg: "{{ token.json.message_response.authentication.auth_data.auth_token }}"

- name: Fetch all missing patches  
  uri:
    url: "https://{{ manageengine_server }}/api/1.3/patch/allpatches?patchstatusfilter={{ status_type }}&pagelimit=2000"
    headers:
       Authorization: "{{ token.json.message_response.authentication.auth_data.auth_token }}"
    method: GET
    validate_certs: no
  register: patches

- name: Create a list of patches and a dictionary with id and patch description mapped
  set_fact:
    filtered_patches: '{{ filtered_patches | combine({item.patch_id: item.patch_description + "  ||  " + item.update_name}) }}'
    filtered_patch_description: '{{ filtered_patch_description + [item.patch_description + "  ||  " + item.update_name] }}'
  loop: "{{ patches.json.message_response.allpatches }}"

- name: Print the patch list 
  debug:
    msg: "{{ filtered_patches }} --- {{ filtered_patches | length }}"

- name: Send Email if there are no patches available 
  include_role:
    name: common/send-email
  vars:
    mail_subject: No Patches available
    mail_body: '<p>There are no patches available for the target machines. Hence terminating the job template with ID <b>"{{ tower_job_id }}"</b> and sending logs in a seperate email</p>' 
  when: filtered_patches | length == 0

- name: Fail if there are no patches available 
  fail: 
    msg: "There are no patches available for the target machines. Hence terminating the job template with ID {{ tower_job_id }} and sending logs in a seperate email. "
  when: filtered_patches | length == 0

- name: Print all missing patches
  debug:
     msg: "{{ filtered_patch_description }}"

- name: Copy the name and ID of all the applicable patches as well as resource IDs into a file
  copy: 
      content: "{ 'patches': {{ filtered_patches }} }"
      dest: /tmp/patch.json

- set_fact: 
     json_data: "{{lookup('file', '/tmp/patch.json') }}"

- debug: 
     msg: "{{ json_data }}"

- name: fetch all deployment policies 
  uri:
    url: "https://{{ manageengine_server }}/api/1.3/patch/deploymentpolicies"
    headers:
       Authorization: "{{ token.json.message_response.authentication.auth_data.auth_token }}"
    method: GET
    validate_certs: no
  register: dp

- name: print deployment policies list
  debug:
     msg: "{{ dp }}"

- name: Filter Out deploymnet policies name and add it to list
  set_fact:
     deployment_policies: "{{ deployment_policies + [item.template_name] }}"
  loop: "{{dp.json.message_response.deploymentpolicies}}"

- name: print deployment policies list
  debug:
     msg: "{{ deployment_policies }}"

- name: Create Survey vars 
  uri:
    url: "https://{{ lookup('env', 'TOWER_HOST') }}/api/v2/workflow_job_templates/{{ manageEngine_workflow_template_id }}/survey_spec/"
    method: POST
    user: "{{ lookup('env', 'TOWER_USERNAME') }}"
    password: "{{ lookup('env', 'TOWER_PASSWORD') }}"
    body_format: json
    body: "{{ survey_body }}"
    force_basic_auth: yes
    validate_certs: no
    return_content: yes
    status_code: 200