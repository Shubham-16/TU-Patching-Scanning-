---
- name: Get the authentication token from ManageEngine
  uri:
    url: "https://{{ manageengine_server }}/api/1.3/desktop/authentication?username={{ user }}&password={{ pass|b64encode }}&auth_type=local_authentication"
    method: GET
    validate_certs: no
  register: token

- name: Fetch all deployment policies 
  uri:
    url: "https://{{ manageengine_server }}/api/1.3/patch/deploymentpolicies"
    headers:
       Authorization: "{{ token.json.message_response.authentication.auth_data.auth_token }}"
    method: GET
    validate_certs: no
  register: dp

- name: Filter Out deploymnet policy ID and store it into a variable
  set_fact:
     deployment_policy_id: "{{ item.template_id }}"
  when: item.template_name == deployment_policy
  loop: "{{dp.json.message_response.deploymentpolicies}}"

- set_fact: 
     json_data: "{{lookup('file', '/tmp/patch.json') }}"

- name: Get the patch ID of the selected patches
  set_fact:
     patch_ids: "{{ patch_ids + [ item.key | int ] }}"
  when: item.value in patch_list
  with_dict: "{{ json_data.patches }}"

- debug:
    msg: "Patch IDs :- {{ patch_ids }}  ---- Deployment policy ID :- {{deployment_policy_id}} "

- name: Create configuration to install specific patch on applicable systems
  uri:
    url: "https://{{ manageengine_server }}/api/1.3/patch/installpatch"
    headers:
       Authorization: "{{ token.json.message_response.authentication.auth_data.auth_token }}"
       Content-Type: application/json
       Accept: application/json
    body_format: json
    validate_certs: no
    body: {
    "PatchIDs":"{{ patch_ids }}",
    "ConfigName":"{{ label }}",
    "ConfigDescription":"{{ description }}",
    "actionToPerform":"Deploy",
    "isOnlyApproved":"false",
    "DeploymentPolicyTemplateID":"{{deployment_policy_id}}"
    }
    method: POST
  register: Config_details

- debug: 
     msg: "{{ Config_details }}"