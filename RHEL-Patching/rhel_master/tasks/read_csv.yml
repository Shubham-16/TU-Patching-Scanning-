---

# Validation 1: To check whether csv file exists or not.
- name: To check whether csv file exists or not
  stat:
    path: "{{file_path}}{{ file_name }}"
  register: stat_result

- name: Sending an email when specified csv file not exists
  include_role:
        name: common/send-email
  vars:
        mail_subject: CSV file of hosts not exists.
        mail_body: '<p> CSV file at {{file_path}}{{file_name}} not exists'
  when: not stat_result.stat.exists

- name: Exiting the playbook due to csv file not found
  fail:
    msg: "CSV file at {{file_path}}{{file_name}} not exists"
  when: not stat_result.stat.exists





# Read CSV file 
- name: Read list of IP's from CSV file and return a list
  become: yes
  read_csv:
    path: "{{file_path}}{{ file_name }}"
    delimiter: ','
  register: users


- name: print user list
  debug: msg="{{ users.list }}"


# validation 2: To check whether csv file empty or not
- name: Sending an email when csv file is empty
  include_role:
        name: common/send-email
  vars:
        mail_subject: Provided CSV file is empty.
        mail_body: '<p>There are no hosts found in provided csv file {{file_path}}{{file_name}}'
  when: users.list | length == 0

- name: Aborting execution due to empty CSV file
  fail:
    msg: "Exiting the playbook because provided csv file is empty."
  when: users.list | length == 0


# validation 3:  To check whether csv file is in proper format or not ( coloumn name "ip" should be there)

- name: Sending an email when there is no coloumn name 'ip' in csv file
  include_role:
        name: common/send-email
  vars:
        mail_subject: No column name ip in csv file.
        mail_body: '<p>There is no column name <b>ip</b> found in provided csv file {{file_path}}{{file_name}}'
  when: " 'ip' not in users.list[0].keys()"


- name: Exiting the playbook when there is no column name 'ip' in csv file
  fail:
    msg: "Abort execution because there is no column name 'ip' in csv file"
  when: " 'ip' not in users.list[0].keys()"
  




- name: Filtered IP's from list of hosts
  set_fact: hosts="{{ users.list | json_query(hosts_list) }}"
  vars:
    hosts_list: "[*].ip"

- name: print list of host from the CSV to be added 
  debug: msg="{{ hosts }}"


# Filter valid IPv4 Addresses.

- name: Filter out the valid IPs
  set_fact:
        valid_hosts: "{{ valid_hosts + [item] }}"
  when: item | ipv4 != false
  loop: "{{ hosts }}"

- name: Invalid hosts IP's
  debug:
      msg: "{{ hosts | difference(valid_hosts) }}"

- name: Send Email if no valid IPv4 adrress available 
  include_role:
    name: common/send-email
  vars:
    mail_subject: Invalid Ip list provided
    mail_body: '<p>Please provide valid IPv4 addresses, following Invalid addresses found <br> {{ hosts | difference(valid_hosts) }}</p>' 
  when: valid_hosts | length == 0


- name: terminating execution if there are no valid IP's found
  fail:
      msg: "There are No Valid IPv4 addresses provided for patching"
  when: valid_hosts | length == 0





